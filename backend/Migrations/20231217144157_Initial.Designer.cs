// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.DataModels;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(Dbcontext))]
    [Migration("20231217144157_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.DataModels.Commment", b =>
                {
                    b.Property<int>("Comment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Comment_id"));

                    b.Property<string>("Comment_text")
                        .HasColumnType("text")
                        .HasColumnName("comment_text");

                    b.Property<int>("autor_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("longread_idcoment")
                        .HasColumnType("integer");

                    b.HasKey("Comment_id");

                    b.HasIndex("autor_id");

                    b.HasIndex("longread_idcoment");

                    b.ToTable("Commments");
                });

            modelBuilder.Entity("backend.DataModels.Longread", b =>
                {
                    b.Property<int>("Longread_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("longread_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Longread_id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("Edit")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edit");

                    b.Property<int>("Likes")
                        .HasColumnType("integer")
                        .HasColumnName("likes");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("autor_id")
                        .HasColumnType("integer");

                    b.Property<string>("content_text")
                        .HasColumnType("text")
                        .HasColumnName("content_text");

                    b.HasKey("Longread_id");

                    b.HasIndex("autor_id");

                    b.ToTable("Longreads");
                });

            modelBuilder.Entity("backend.DataModels.User", b =>
                {
                    b.Property<int>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("User_id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("Followers_count")
                        .HasColumnType("integer")
                        .HasColumnName("followers_count");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Nickname")
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<string>("Surname")
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.HasKey("User_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.DataModels.Commment", b =>
                {
                    b.HasOne("backend.DataModels.User", "autor")
                        .WithMany()
                        .HasForeignKey("autor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.DataModels.Longread", "longreads")
                        .WithMany()
                        .HasForeignKey("longread_idcoment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("autor");

                    b.Navigation("longreads");
                });

            modelBuilder.Entity("backend.DataModels.Longread", b =>
                {
                    b.HasOne("backend.DataModels.User", "autor")
                        .WithMany()
                        .HasForeignKey("autor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("autor");
                });
#pragma warning restore 612, 618
        }
    }
}
